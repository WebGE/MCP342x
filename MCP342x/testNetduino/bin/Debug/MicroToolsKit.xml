<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MicroToolsKit</name>
    </assembly>
    <members>
        <member name="T:Microtoolskit.Hardware.IHM.IHMSSI">
            <summary>
            IHM SSI (PCF2119 and two PCF8574) class
            </summary>
            <remarks>
            You may have some additional information about this class on https://webge.github.io/IHMSSI/
            </remarks>
        </member>
        <member name="T:Microtoolskit.Hardware.IHM.IHMSSI.Led">
            <summary>
            IHM SSI LED class
            </summary>
            <remarks>
            You may have some additional information about this class on https://webge.github.io/IHMSSI/
            </remarks>
        </member>
        <member name="M:Microtoolskit.Hardware.IHM.IHMSSI.Led.#ctor(System.Boolean,System.Byte,Microtoolskit.Hardware.IO.PCF8574)">
            <summary>
            Constructor
            </summary>
            <param name="state">true or false</param>
            <param name="position">position 0 to 7</param>
            <param name="leds">I2C port I/O</param>
        </member>
        <member name="M:Microtoolskit.Hardware.IHM.IHMSSI.Led.Write(System.Boolean)">
            <summary>
            Write true or false on Led n (n = 0...7)
            </summary>
            <param name="state">true or false</param>
        </member>
        <member name="T:Microtoolskit.Hardware.IHM.IHMSSI.BP">
            <summary>
            IHM SSI button class
            </summary>
            <remarks>
            You may have some additional information about this class on https://webge.github.io/IHMSSI/
            </remarks>
        </member>
        <member name="M:Microtoolskit.Hardware.IHM.IHMSSI.#ctor">
            <summary>
            Constructor : LCD = MIDAS(0x3A); PCF8574 (addBPs_I2C = 0x3f, addLeds_I2C=0x38); Frequence_Bus=100kHz;
            Leds => Off; Lcd => Init
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.IHM.IHMSSI.#ctor(Microtoolskit.Hardware.Displays.I2CLcd)">
            <summary>
            Constructor : PCF8574 (addBPs_I2C = 0x3f, addLeds_I2C=0x38); Frequence_Bus=100kHz;
            </summary>
            <param name="lcd">MIDAS(0x3A) or BATRON(0x3B), F[100kHz,400kHz]</param>
        </member>
        <member name="M:Microtoolskit.Hardware.IHM.IHMSSI.#ctor(Microtoolskit.Hardware.IO.PCF8574,Microtoolskit.Hardware.Displays.I2CLcd)">
            <summary>
            Constructor : LCD = MIDAS(0x3A); PCF8574 (addBPs_I2C = 0x3f, addLeds_I2C=0x38); Frequence_Bus=100kHz;
            </summary>
            <param name="leds">addLeds_I2C=> PCF8574[0x20, 0x27], PCF8574A[0x38, 0x3F], F[100kHz,400kHz]</param>
            <param name="lcd">MIDAS(0x3A) or BATRON(0x3B)</param>
        </member>
        <member name="M:Microtoolskit.Hardware.IHM.IHMSSI.#ctor(Microtoolskit.Hardware.IO.PCF8574,Microtoolskit.Hardware.IO.PCF8574,Microtoolskit.Hardware.Displays.I2CLcd)">
            <summary>
            Constructor
            </summary>
            <param name="leds">addLeds_I2C=> PCF8574[0x20, 0x27], PCF8574A[0x38, 0x3F], F[100kHz,400kHz]</param>
            <param name="BPs">addLeds_I2C=> PCF8574[0x20, 0x27], PCF8574A[0x38, 0x3F], F[100kHz,400kHz]</param>
            <param name="lcd">MIDAS(0x3A) or BATRON(0x3B), F[100kHz,400kHz]</param>
        </member>
        <member name="M:Microtoolskit.Hardware.IHM.IHMSSI.LedsOff">
            <summary>
            All Leds Off
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.IHM.IHMSSI.LedsOn">
            <summary>
            All Leds On
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.IHM.IHMSSI.LedsWrite(System.Byte)">
            <summary>
            "0" => Led On, "1" => Led Off
            </summary>
            <param name="value">value to write</param>
        </member>
        <member name="M:Microtoolskit.Hardware.IHM.IHMSSI.BPsRead(System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Reads all IHMSSI board buttons
            </summary>
            <param name="BPEchap"></param>
            <param name="BPEnter"></param>
            <param name="BPOk"></param>
            <param name="BPSet"></param>
            <param name="BPMoins"></param>
            <param name="BPFleBas"></param>
            <param name="BPFleHaut"></param>
            <param name="BPPlus"></param>
        </member>
        <member name="T:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver">
            <summary>
            EasyDriver Stepper Motor class
            </summary>
            <remarks>
            You may have some additional information about this class on https://github.com/WebGE/EasyDriverStepperMotor
            </remarks>
        </member>
        <member name="P:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.Steps">
            <summary>
            Get Steps
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.StepDirection">
            <summary>
            Get direction
            </summary>      
        </member>
        <member name="P:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.StepMode">
            <summary>
            Get Mode
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.StepDelay">
            <summary>
            Get time between two step
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.IsDriverSleep">
            <summary>
            Get if Sleep or not
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.IsOutputsEnable">
            <summary>
            Get if Enable or Disable
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Creates an instance of the driver, that only lets you move and choose direction.
            </summary>
            <param name="DirectionPin">Control EasyDriver DIR: a digital pin used for direction</param>
            <param name="StepPin">Control EasyDriver STEP: a digital pin used for steps</param>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Creates an instance of the driver, that only lets you move, choose direction and put the controller to sleep
            </summary>
            <param name="DirectionPin">Control EasyDriver DIR: a digital pin used for direction</param>
            <param name="StepPin">Control EasyDriver STEP: a digital pin used for steps</param>
            <param name="SleepPin">Control EasyDriver SLP: a digital pin used for sleep function (disable par default)</param>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Creates an instance of the driver, that only lets you move, choose direction, sleep, and select step mode
            </summary>
            <param name="DirectionPin">Control EasyDriver DIR PIN: a digital pin used for direction</param>
            <param name="StepPin">Control EasyDriver STEP: a digital pin used for steps</param>
            <param name="SleepPin">Control EasyDriver SLP: a digital pin used for sleep function (disable par default)</param>
            <param name="StepModePinOne">Control EasyDriver MS1: a digital pin used for control mode</param>
            <param name="StepModePinTwo">Control EasyDriver MS2: a digital pin used for control mode</param>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.#ctor(Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin,Microsoft.SPOT.Hardware.Cpu.Pin)">
            <summary>
            Creates an instance of the driver, that only lets you move, choose direction, sleep, select step mode and enable / disable card
            </summary>
            <param name="DirectionPin">Control EasyDriver DIR PIN: a digital pin used for direction</param>
            <param name="StepPin">Control EasyDriver STEP: a digital pin used for steps</param>
            <param name="SleepPin">Control EasyDriver SLP: a digital pin used for sleep function (disable par default)</param>
            <param name="StepModePinOne">Control EasyDriver MS1: a digital pin used for control mode</param>
            <param name="StepModePinTwo">Control EasyDriver MS2: a digital pin used for control mode</param>
            <param name="EnablePin">Control EasyDriver ENABLE: a digital pin used for Enable function</param>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.Sleep">
            <summary>
            Put the stepper driver to sleep mode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.WakeUp">
            <summary>
            Wake up the stepper driver
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.EnableOutputs">
            <summary>
            Enable the stepper driver outputs
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.DisableOutputs">
            <summary>
            Disable the stepper driver outputs
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.Turn(System.UInt32,Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.Direction,System.Int32,Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.Mode)">
            <summary>
            
            </summary>
            <param name="steps">The amount of steps that need to be moved</param>
            <param name="direction"></param>
            <param name="stepdelay">Duration between steps</param>
            <param name="mode"></param>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.ChangeDirection(Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.Direction)">
            <summary>
            Set Direction pin
            </summary>
            <param name="dir"></param>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.ChangeStepMode(Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.Mode)">
            <summary>
            Set pins MS1 and MS2 
            </summary>
            <param name="mode"></param>
        </member>
        <member name="T:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.Direction">
            <summary>
            Directions are Forward or Backward
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.MotorDrivers.EasyStepperDriver.Mode">
            <summary>
            Modes are Full, Half, Quarter, OneEighth
            </summary> 
        </member>
        <member name="T:Microtoolskit.Hardware.MotorDrivers.MotorControlMD2x">
            <summary>
            MotorControlMD2x Dual 12Volt 2.8Amp H Bridge Motor Drive class
            </summary>
            <remarks>
            You may have some additional information about this class on https://github.com/WebGE/MD25
            </remarks>
        </member>
        <member name="M:Microtoolskit.Hardware.MotorDrivers.MotorControlMD2x.GetAllRegisters">
            <summary>
            Lecture des 17 registres de la carte MD2x
            et calcul de la valeur des encodeurs
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microtoolskit.Hardware.Displays.I2CLcd">
            <summary>
            PCF2119 I²C LCD controllers/drivers class. 
            </summary>
            <remarks>
            You may have some additional information about this class on http://webge.github.io/LCDI2C/
            </remarks>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.#ctor">
            <summary>
            This constructor assumes the default Midas factory Slave Address = 0x3A and bus frequency = 100kHz
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.#ctor(System.Byte)">
            <summary>
            This constructor allows user to specify the Slave Address, bus frequency = 100khz
            </summary>
            <param name="I2C_Add_7bits">Manufacturer Adress I2C</param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.#ctor(Microtoolskit.Hardware.Displays.I2CLcd.LcdManufacturer)">
            <summary>
            This constructor allows user to specify the LCD Manufacturer name, bus frequency = 100khz
            </summary>
            <param name="ManufacturerName">LCD Manufacturer Name</param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.#ctor(System.Byte,System.UInt16)">
            <summary>
            This constructor allows user to specify the Slave Address and bus frequency
            </summary>
            <param name="I2C_Add_7bits">Manufacturer Adress I2C</param>
            <param name="FreqBusI2C">Bus frequency</param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.#ctor(Microtoolskit.Hardware.Displays.I2CLcd.LcdManufacturer,System.UInt16)">
             <summary>
             This constructor allows user to specify the LCD Manufacturer name and bus frequency
             </summary>
            <param name="ManufacturerName">LCD Manufacturer Name</param>
             <param name="FreqBusI2C">Bus frequency</param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.Init">
            <summary>
            Initialize the LCD before use 
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.SelectCursor(Microtoolskit.Hardware.Displays.I2CLcd.CursorType)">
            <summary>
            Three cursor modes
            </summary>
            <param name="posCursor"></param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.SetBacklight(System.Byte)">
            <summary>
            Set brightness  20 dark -> 0 light
            </summary>
            <param name="bright"></param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.LineBegin(System.Byte)">
            <summary>
            Goto start of line
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.PutString(System.Byte,System.Byte,System.String)">
            <summary>
            Write a line of text at x,y
            </summary>
            <param name="x_pos"></param>
            <param name="y_pos"></param>
            <param name="Text"></param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.PutChar(System.Byte,System.Byte,System.Byte)">
            <summary>
            Single character write at x,y
            </summary>
            <param name="x_pos"></param>
            <param name="y_pos"></param>
            <param name="z_char"></param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.I2CLcd.ClearScreen">
            <summary>
            Clear screen
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Displays.ELCD162">
            <summary>
            ELCD162 : lcd serie control Driver class
            </summary>
            <remarks>
            You may have some additional information about this class on http://webge.github.io/ELCD162/
            </remarks>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.ELCD162.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
            <summary>
            Built a COM port with COM2, 19200, None, 8, 1 stop
            </summary>
            <param name="com"></param>
            <param name="baudrate"></param>
            <param name="parite"></param>
            <param name="bits"></param>
            <param name="stopb"></param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.ELCD162.Init">
            <summary> 
            Open the communication and send Initiate Byte 0xA
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.ELCD162.PutString(System.String)">
            <summary>
            Convert string in UTF8 and push
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.ELCD162.ClearScreen">
            <summary>
            Clear screen
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.ELCD162.CursorOn">
            <summary>
            Put cursor on
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.ELCD162.CursorOff">
            <summary>
            Put cursor off
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Displays.ELCD162.SetCursor(System.Byte,System.Byte)">
            <summary>
            Put cursor on (x,y)
            </summary>
            <param name="x_pos"></param>
            <param name="y_pos"></param>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.SRF08">
            <summary>
            SRF08 Ultra sonic range finder  class
            </summary>
            <remarks>
            You may have some additional information about this class on http://webge.github.io/SRF08/
            </remarks>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.SRF08.Registers">
            <summary>
            SRF08 Registers list
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.SRF08.MeasuringUnits">
            <summary>
            SRF08 ranging Mode and Unity
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.SRF08.#ctor">
            <summary>
            Constructor with Slave Address = 0x70 and Bus Frequency = 100kHz
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.SRF08.#ctor(System.Byte)">
            <summary>
            Constructor with Bus Frequency = 100kHz
            </summary>
            <param name="I2C_Add_7bits">ADDR in 0x70 to 0x7F</param>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.SRF08.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="I2C_Add_7bits">ADDR in 0x70 to 0x7F</param>
            <param name="FreqBusI2C">400kHz max</param>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.SRF08.VersSoft">
            <summary>
            Software Revision Register Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.SRF08.Mode">
            <summary>
            Mode Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.SRF08.LightSensor">
            <summary>
            Light Sensor Register Get Access
            </summary>
            <return></return>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.SRF08.FirstEchoHighByte">
            <summary>
            1st Echo High Byte
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.SRF08.FirstEchoLowByte">
            <summary>
            1st Echo Low Byte Get Access
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.SRF08.ReadRange(Microtoolskit.Hardware.Sensors.SRF08.MeasuringUnits)">
            <summary>
            Triggers a shot ulrasons, wait for 75ms and return result in the unit of measure
            </summary>
            <param name="units">unit of measure expected</param>
            <returns>range in cm or inches or millisec</returns>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.SRF08.TrigShotUS(Microtoolskit.Hardware.Sensors.SRF08.MeasuringUnits)">
            <summary>
            Only triggers a shot ulrasons
            </summary>
            <param name="units">unit of measure expected</param>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.SRF08.GetRegister(Microtoolskit.Hardware.Sensors.SRF08.Registers)">
            <summary>
            Returns the value contained in a register
            et +
            </summary>
            <param name="RegisterNumber">The register number</param>
            <returns></returns>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.HMC6352">
            <summary>
            HMC6352 Digital Compass class
            </summary>
            <remarks>
            You may have some additional information about this class on todo
            </remarks>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TSL2561">
            <summary>
            TSL2561 LIGHT-TO-DIGITAL CONVERTER class
            </summary>
            <remarks>
            You may have some additional information about this class on http://webge.github.io/TSL2561/
            </remarks>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TSL2561.AddRegisters">
            <summary>
            TSL2561 Registers list
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TSL2561.Channels">
            <summary>
            TSL2561 Channels list
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TSL2561.CommandByte">
            <summary>
            TSL2561 CommandByte list
            </summary>
            CommanByte = CommandBit | ClearBit | WordBit| BlockBit | ControlPowerOn | ControlPowerOff
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TSL2561.ControlByte">
            <summary>
            TSL2561 ControlByte list
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TSL2561.IntegrationTime">
            <summary>
            IntegrationTime
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TSL2561.Gain">
            <summary>
            Gain x1 = 0xEF (0-> bit4) x16 = 0x10 (1->bit4)command
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.Dispose">
            <summary>
            Déconnexion virtuelle de l'objet Lcd du bus I2C
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.#ctor">
            <summary>
            Constructor with Slave Address = 0x29 and Bus Frequency = 100kHz
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.#ctor(System.Byte)">
            <summary>
            Constructor with Bus Frequency = 100kHz
            </summary>
            <param name="I2C_Add_7bits">ADDR SEL TERMINAL LEVEL: (GND)0x29, (VDD)0x49, (FLOAT)0x69</param>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.#ctor(System.Byte,System.UInt16)">
            <summary>
            Constructor
            </summary>
            <param name="I2C_Add_7bits">ADDR SEL: (GND)0x29, (VDD)0x49, (FLOAT)0x69</param>
            <param name="Frequency">400 khz max</param>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.TSL2561.control">
            <summary>
            Control Register Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.TSL2561.timing">
            <summary>
            Timing Register Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.TSL2561.threshLowLow">
            <summary>
            Threshlowlow Register Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.TSL2561.threshLowhigh">
            <summary>
            Threshlowhigh Register Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.TSL2561.threshhighLow">
            <summary>
            Threshhighlow Register Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.TSL2561.threshhighhigh">
            <summary>
            Threshhighhigh Register Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.TSL2561.interrupt">
            <summary>
            Interrupt Register Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.TSL2561.id">
            <summary>
            Id Register Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.TSL2561.channel0">
            <summary>
            Channel0 Register Get Access
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.TSL2561.channel1">
            <summary>
            Channel1 Register Get Access
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.Init">
            <summary>
            TSL2561 Initialisation : 
            Power Up, IRQ disable,Power Down
            Gain = 1, Integrate time = 13ms
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.SetRegister(Microtoolskit.Hardware.Sensors.TSL2561.AddRegisters,System.Byte)">
            <summary>
            Write a byte in a register
            </summary>
            <param name="add">register adress</param>
            <param name="value">value to write</param>
            <returns></returns>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.GetRegister(Microtoolskit.Hardware.Sensors.TSL2561.AddRegisters)">
            <summary>
            Read a byte from a register
            </summary>
            <param name="add">register adress</param>
            <returns>register value</returns>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.GetWord(Microtoolskit.Hardware.Sensors.TSL2561.AddRegisters)">
            <summary>
            
            </summary>
            <param name="add"></param>
            <returns></returns>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.Enable">
            <summary>
            TSL2561 power up
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.Disable">
            <summary>
            TSL2561 power down
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TSL2561.calculateLux">
            <summary>
            Calculate lux for Adafruit or Grove sensor 
            </summary>
            <returns>lux</returns>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TMP102">
            <summary>
            TMP102 Low-Power Digital Temperature Sensor With SMBus and Two-Wire Serial Interface class
            </summary>
            <remarks>
            You may have some additional information about this class on https://github.com/WebGE/TMP102
            </remarks>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TMP102.ADD0">
            <summary>
            7 bits Address pin ADD0. 
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ADD0.Gnd">
            <summary>
            ADD0.Gnd = 0x48 (default)
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ADD0.Vcc">
            <summary>
            ADD0.Vcc = 0x49
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ADD0.SDA">
            <summary>
            ADD0.SDA = 0x4A
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ADD0.SCL">
            <summary>
            ADD0.SCL = 0x4B
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TMP102.ConversionRate">
            <summary>
            Conversion rates
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ConversionRate.quarter_Hz">
            <summary>
            0.25Hz
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ConversionRate.one_Hz">
            <summary>
            1Hz
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ConversionRate.four_Hz">
            <summary>
            4Hz (default)
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ConversionRate.eight_Hz">
            <summary>
            8Hz
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TMP102.ThermostatMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ThermostatMode.ComparatorMode">
            <summary>
            default
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ThermostatMode.InterruptMode">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TMP102.AlertPolarity">
            <summary>
            The Polarity bit allows the user to adjust the polarity
            of the ALERT pin output. 
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.AlertPolarity.activeLow">
            <summary>
            default
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.AlertPolarity.activeHigh">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TMP102.ConsecutiveFaults">
            <summary>
            A fault condition exists when the measured
            temperature exceeds the user-defined limits set in the
            THIGH and TLOW registers
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ConsecutiveFaults.one">
            <summary>
            default
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ConsecutiveFaults.two">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ConsecutiveFaults.four">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.TMP102.ConsecutiveFaults.six">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.TMP102.Registers">
            <summary>
            The 8-bit Pointer Register of the device is
            used to address a given data register
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TMP102.#ctor(Microtoolskit.Hardware.Sensors.TMP102.ADD0,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="addressSelect">ADD0 connected to Gnd (0x48 default)</param>
            <param name="FreqBusI2C">100kHz (Default)</param>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TMP102.Init">
            <summary>
            Initialise TMP102 with default values : oneShotMode = false, alertPolarity = activeHigh, conversionRate = four_Hz, thermostatMode = ComparatorMode
            consecutiveFaults = one, limitHigh = 0, limitLow = 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TMP102.Init(System.Boolean,Microtoolskit.Hardware.Sensors.TMP102.AlertPolarity,Microtoolskit.Hardware.Sensors.TMP102.ConversionRate,Microtoolskit.Hardware.Sensors.TMP102.ThermostatMode)">
            <summary>
            Initialise the TMP102
            </summary>
            <param name="oneShotMode">true : OneShot, false : Conversion ready (default)</param>
            <param name="alertPolarity">The polarity of the ALERT pin output</param>
            <param name="conversionRate">Conversion rates : 8Hz, 4Hz (default), 1Hz, or 0.25Hz</param>
            <param name="thermostatMode">In comparator mode, the ALERT pin becomes active
            when the temperature equals or exceeds the value
            in THIGH for a consecutive number of fault conditions</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TMP102.ReadAsCelcius">
            <summary>
            Read temperature and return Celcius
            </summary>
            <returns>temperature as Celcius</returns>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TMP102.ReadAsFahrenheit">
            <summary>
            Read temperature and return Fahrenheit
            </summary>
            <returns>temperature as Fahrenheit</returns>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TMP102.ReadAsKelvin">
            <summary>
            Read temperature and return Kelvin
            </summary>
            <returns>temperature as Kelvin</returns>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.TMP102.ReadAsRankine">
            <summary>
            Read temperature and return Rankine
            </summary>
            <returns>temperature as Rankine</returns>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.MLX90614">
            <summary>
            MLX90614 IR Temperature sensor class
            </summary>
            <remarks>
            You may have some additional information about this class on https://webge.github.io/MLX90614/
            </remarks>
        </member>
        <member name="T:Microtoolskit.Hardware.Sensors.MLX90614.data">
            <summary>
            data size : one or two bytes
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.MLX90614.sla">
            <summary>
            7-bit Slave Adress
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.Sensors.MLX90614.config">
            <summary>
            MLX90614 configuration
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.MLX90614.#ctor(System.UInt16,System.Int16)">
            <summary>
            MLX90614 IR Temperature sensor
            </summary>
            <param name="SLA">7-bit Slave Address (0x00 to 0x7F) 0x5A by default</param>
            <param name="Frequency">10kHz to 100kHz (50kHz by default)</param>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.MLX90614.SLA">
            <summary>
            Get 7-bit Slave Adress
            </summary>
        </member>
        <member name="P:Microtoolskit.Hardware.Sensors.MLX90614.ConfigRegister">
            <summary>
            Get Config Register
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.MLX90614.Read_TA_AsCelcius">
            <summary>
            Returns the air temperature in degrees Celsius
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.MLX90614.Read_Tobj_AsCelcius">
            <summary>
            Returns the object temperature in degrees Celsius
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.MLX90614.Read_TA_AsFahrenheit">
            <summary>
            Returns the air temperature in degrees Fahrenheit
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.MLX90614.Read_Tobj_AsFahrenheit">
            <summary>
            Returns the object temperature in degrees Fahrenheit
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.Sensors.MLX90614.readRegister(System.Byte,Microtoolskit.Hardware.Sensors.MLX90614.data)">
            <summary>
            Get 16-bit data in RAM or EEPROM register
            </summary>
            <param name="register">Air temperature TA = 0x06, Object temperature Tobj1 = 0x07</param>
            <param name="size">One or txo bytes</param>
            <returns></returns>
        </member>
        <member name="T:Microtoolskit.Hardware.IO.PCF8574">
            <summary>
            PCF8574 - Remote 8-bit I/O expander for I2C-bus with interrupt class
            </summary>
            <remarks>
            You may have some additional information about this class on http://webge.github.io/PCF8574/
            </remarks>
        </member>
        <member name="F:Microtoolskit.Hardware.IO.PCF8574.config">
            <summary>
            PCF8574 configuration
            </summary>
        </member>
        <member name="F:Microtoolskit.Hardware.IO.PCF8574.sla">
            <summary>
            7-bit Slave Adress
            </summary>
        </member>
        <member name="M:Microtoolskit.Hardware.IO.PCF8574.#ctor(System.UInt16,System.Int16)">
            <summary>
            PCF8574 8-bit I/O expander
            </summary>
            <param name="SLA">PCF8574(@=0x20 to 0x27) or PCF8574A(@=0x38 to 0x3f), 0x38 by default</param>
            <param name="Frequency">100khz to 400kHz, 100kHz by default </param>
        </member>
        <member name="M:Microtoolskit.Hardware.IO.PCF8574.Write(System.Byte)">
            <summary>
            Write byte on PCF8574 port I/O
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microtoolskit.Hardware.IO.PCF8574.Read">
            <summary>
            Read the PCF8574 port I/O 
            </summary>
        </member>
    </members>
</doc>
